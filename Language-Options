Besides Python, you can use a variety of programming languages for this project. Here are a few options:

JavaScript (Node.js): You can use the axios library for making API requests and perform the analysis using JavaScript. Node.js allows you to run JavaScript on the server-side.
Solidity: If you're comfortable with Ethereum's programming language, you can create a smart contract that performs this analysis directly on-chain. This would involve more complexity but could provide direct access to on-chain data.
Java: You can use Java and libraries like OkHttp for API requests and perform analysis using Java's standard libraries.
Ruby: You can use the net/http library for API requests and perform analysis using Ruby. Ruby has a concise syntax that might make certain tasks easier.
Go: Go (or Golang) is known for its efficiency and could be used to build a command-line tool to fetch data and perform analysis.
Rust: Rust's focus on performance and memory safety could make it an interesting choice for building a robust tool for this purpose.
C#: If you're familiar with C# and .NET, you could use libraries like HttpClient for API requests and develop the analysis logic using C#.
PHP: Although not commonly used for blockchain-related tasks, PHP with its curl library can be used to make API requests and analyze data.
The choice of programming language often depends on your familiarity with the language, the libraries available for API interaction and data analysis, and the specific requirements of your project.
